generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          Int       @default(0) @db.TinyInt
  accounts      Account[]
  sessions      Session[]
  issues        Issue[]   @relation("UserIssues") // This field establishes the relation from the user's side
  assignedIssues Issue[]  @relation("UserAssignedIssues")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Issue {
  id          Int          @id @default(autoincrement())
  title       String       @db.VarChar(255)
  description String       @db.VarChar(255)
  status      Issue_status @default(OPEN)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userId      String       // Foreign key field
  user        User         @relation(fields: [userId], references: [id], name: "UserIssues") // Relation field
  assignedToUserId String? @db.VarChar(255)
  assignedToUser User?     @relation(fields: [assignedToUserId], references: [id], name: "UserAssignedIssues")

  @@index([userId])
  @@map("issues")
}

enum Issue_status {
  OPEN
  IN_PROGRESS
  CLOSED
}
