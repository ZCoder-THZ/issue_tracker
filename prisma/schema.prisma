generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  email                 String?        @unique
  emailVerified         DateTime?
  image                 String?
  role                  Int            @default(0)
  password              String?
  accounts              Account[]
  sessions              Session[]
  issueCommands         IssueCommand[]
  assignedIssues        Issue[]        @relation("UserAssignedIssues")
  issues                Issue[]        @relation("UserIssues")
  sentNotifications     Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")
  chats                 UserChat[]
  sentMessages          Message[]      @relation("MessageSender") // Added this relation
    
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Issue {
  id               Int            @id @default(autoincrement())
  title            String
  description      String
  status           IssueStatus    @default(OPEN)
  priority         IssuePriority  @default(low)
  assignedDate     DateTime?
  deadlineDate     DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           String
  assignedToUserId String?
  issueCommands    IssueCommand[]
  issueImages      IssueImage[]
  assignedToUser   User?          @relation("UserAssignedIssues", fields: [assignedToUserId], references: [id])
  user             User           @relation("UserIssues", fields: [userId], references: [id])
  notifications    Notification[]

  @@index([userId])
  @@index([assignedToUserId])
  @@map("issues")
}

model IssueImage {
  id       Int    @id @default(autoincrement())
  issueId  Int
  imageUrl String
  storageType     StorageType?     @default(value: CLOUDINARY)
  issue    Issue  @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@index([issueId])
  @@map("issue_images")
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  type      String
  createdAt DateTime @default(now())
  userId    String
  issueId   Int?
  read      Boolean  @default(false)
  senderId  String
  title     String
  issue     Issue?   @relation(fields: [issueId], references: [id], onDelete: Cascade)
  sender    User     @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User     @relation("NotificationReceiver", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([senderId])
  @@index([issueId])
  @@index([read])
  @@map("notifications")
}

model IssueCommand {
  id        Int      @id @default(autoincrement())
  issueId   Int
  userId    String
  timestamp DateTime @default(now())
  text      String
  likes     Int      @default(0)
  replies   Json     @default("[]")
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([issueId])
  @@index([userId])
  @@map("issue_commands")
}

model Chat {
  id        String    @id @default(cuid())
  name      String
  type      ChatType  @default(PRIVATE)
  avatar    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  members   UserChat[]
  messages  Message[]
  
  @@map("chats")
}

model UserChat {
  id          String   @id @default(cuid())
  userId      String
  chatId      String
  lastReadAt  DateTime?
  unreadCount Int      @default(0)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat        Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@unique([userId, chatId])
  @@map("user_chats")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  chatId    String
  senderId  String
  timestamp DateTime @default(now())
  read      Boolean  @default(false)
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([senderId])
  @@map("messages")
}

enum ChatType {
  PRIVATE
  GROUP
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum IssuePriority {
  high
  medium
  low
  lowest
}

enum StorageType {
  CLOUDINARY
  S3
  LOCAL
}