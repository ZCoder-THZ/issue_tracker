generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  role           Int       @default(0) @db.TinyInt
  password       String?
  accounts       Account[]
  assignedIssues Issue[]   @relation("UserAssignedIssues")
  issues         Issue[]   @relation("UserIssues")
  sessions       Session[]
  notifications  Notification[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Issue {
  id               Int            @id @default(autoincrement())
  title            String         @db.VarChar(255)
  description      String         @db.VarChar(255)
  status           IssueStatus    @default(OPEN)
  priority         IssuePriority  @default(low)
  assignedDate     DateTime?      // Optional field for the date the issue was assigned
  deadlineDate     DateTime?      // Optional field for the deadline date
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           String
  assignedToUserId String?        @db.VarChar(255)
  assignedToUser   User?          @relation("UserAssignedIssues", fields: [assignedToUserId], references: [id])
  user             User           @relation("UserIssues", fields: [userId], references: [id])
  notifications    Notification[]

  @@index([userId])
  @@index([assignedToUserId], map: "issues_assignedToUserId_fkey")
  @@map("issues")
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String   @db.VarChar(255)
  type      String
  createdAt DateTime @default(now())
  userId    String
  issueId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  issue     Issue    @relation(fields: [issueId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([issueId])
  @@map("notifications")
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum IssuePriority {
  high
  medium
  low
  lowest
}
